<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cn.exi</groupId>
    <artifactId>smart4j</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--1.统一源代码的编码方式，否则Maven编译源代码时候出错-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>


    <!--所有的plugin都需要添加到build/plugin标签下-->
    <build>
        <plugins>
            <plugin>
                <!--2.统一源代码与编译输出的JDK版本-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <!--3.可选。打包maven时跳过单元测试-->
            <!--Test-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>

            <!--Tomcat的配置，可选(当IDEA没有集成Tomcat功能时可以通过Tomcat的maven插件进行启动Tomcat)-->
            <!--<plugin>-->
                <!--<groupId>org.apache.tomcat.maven</groupId>-->
                <!--<artifactId>tomcat7-maven-plugin</artifactId>-->
                <!--<version>2.2</version>-->
                <!--<configuration>-->
                    <!--<path>/${project.artifactId}</path>-->
                <!--</configuration>-->
            <!--</plugin>-->
        </plugins>
    </build>

    <!--2.1.由于需要添加Java Web的依赖，而web是需要将web打包为war包-->
    <packaging>war</packaging>

    <!--2.2 添加Java web所需要的Servlet、jsp、jstl等依赖-->
    <!--如果某些依赖只参与编译，而无需参与打包（如Tomcat自带了servlet和jsp）可以设置scorp为provider-->
    <!--如果依赖只是在运行时需要，无需参与编译的（如JSTL）则可设置为runtime-->
    <dependencies>
        <!--Servlet依赖-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>
        <!--Jsp依赖-->
        <dependency>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>jsp-api-2.1</artifactId>
            <version>6.1.5</version>
            <scope>provided</scope>
        </dependency>
        <!--JSTL依赖-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
            <scope>runtime</scope>
        </dependency>


        <!--增加JUnit单元测试框架-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

        <!--添加SLF4J依赖，用于提供日志API，且使用Log4j作为实现-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.7</version>
        </dependency>

        <!--添加MySQL依赖，用户提供JDBC实现-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.40</version>
            <scope>runtime</scope>
        </dependency>

        <!--添加两个Apache COmmons依赖，用户提供常用的工具类-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.4</version>
        </dependency>
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2.1</version>
        </dependency>

        <!--DbUtils 的类库，为我们提供了一个JDBC 的封装,简化了数据库的连接-->
        <dependency>
            <groupId>commons-dbutils</groupId>
            <artifactId>commons-dbutils</artifactId>
            <version>1.6</version>
        </dependency>

        <!--由于使用JDBC或者DBUtils的方式来操作数据库都是没有池这种概率的，因此我们使用DBCP的数据库连接池的框架-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <version>2.0.1</version>
        </dependency>
    </dependencies>


</project>